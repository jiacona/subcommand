= subcommand

A tiny wrapper over ruby's awesome OptionParser (standard) which gives easy facility of subcommands.
It has a similar interface to git and prints subcommands summary as well.

== Features:

1. subcommands using all of OptionParser's features
2. aliases for subcommands


e.g
Assuming a program "prog" with subcommands "del" and "add"

    prog help
    prog --help

    prog help del
    prog del --help

    prog del --force file.a
    prog --verbose del --force file.a

== Examples

 if a program has subcommands foo and baz

     ruby opt.rb help
     ruby opt.rb --help
     ruby opt.rb help foo
     ruby opt.rb foo --help
     ruby opt.rb baz --quiet "some text"
     ruby opt.rb --verbose foo --force file.zzz

== STEPS 

    1. define global_options (optional)

     global_options do |opts|
       opts.banner = "Usage: opt.rb [options] [subcommand [options]]"
       opts.description = "Stupid program that does something"
       opts.separator ""
       opts.separator "Global options are:"
       opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
         options[:verbose] = v
       end
     end

    2. define commands using command(). Send multiple names for aliases.

     command :foo do |opts|
       opts.banner = "Usage: foo [options]"
       opts.description = "desc for foo"
       opts.on("-f", "--[no-]force", "force verbosely") do |v|
         options[:force] = v
       end
     end

     # aliases init and create
     command :init, :create do |opts| ...

    3. call opt_parse()

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Rahul Kumar. See LICENSE for details.
